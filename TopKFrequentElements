MAX Heap:

T.c --> O(nlog(n-k))
S.c--> O(2n-k)

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> { 
            return b[1] - a[1];
        });       
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i =0; i<nums.length; i++){
           map.put(nums[i],map.getOrDefault(nums[i],0)+1);           
        }
        int[] result = new int[k];
        int i =0;
        for(Integer key: map.keySet()){
            int[] temp = new int[]{ key,map.get(key) };
            pq.add(temp);
            if(pq.size() > (map.size()-k)){
               result[i++] = pq.poll()[0];
            }
        }
        return result;
    }
}
******************************************************************************

MIN Heap:
T.c --> O(nlogk)
S.c --> O(n+k)

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> { 
            return a[1] - b[1];
        });       
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i =0; i<nums.length; i++){
           map.put(nums[i],map.getOrDefault(nums[i],0)+1);           
        }
        int[] result = new int[k];
        int i =0;
        for(Integer key: map.keySet()){
            int[] temp = new int[]{ key,map.get(key) };
            pq.add(temp);
            if(pq.size() > (k)){
               pq.poll();
            }
        }
        while(!pq.isEmpty()){
            result[i++] = pq.poll()[0];
        }
        return result;
    }
}

*********************************************************************
T.c --> O(n)
S.c --> O(n)

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int max = Integer.MIN_VALUE;
        for(int i =0; i<nums.length; i++){
           map.put(nums[i],map.getOrDefault(nums[i],0)+1);       
           max = Math.max(max,map.get(nums[i]));    
        }
        List[] lists = new List[max+1];
        for(int key: map.keySet()){
           int index = map.get(key);
           if(lists[index] == null){
            lists[index] = new ArrayList<>();
           }           
           lists[index].add(key);
        }
        int[] result = new int[k];
        for(int i = max; i>=0 && k > 0; i--){
           List<Integer> temp = lists[i];
           if(temp == null){
            continue;
           }
           for(int j = 0; j<temp.size() && k >0 ; j++){
              result[k-1] = temp.get(j);
              k--;
           }
        }
        return result;     
    }
}